{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.jsx","redux/contacts/contacts-selectors.js","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["FetchContactsRequest","createAction","FetchContactsSuccess","FetchContactsError","SubmitContactRequest","SubmitContactSuccess","SubmitContactError","DeleteContactRequest","DeleteContactSuccess","DeleteContactError","SetFilter","items","createReducer","_","action","payload","state","filter","contact","id","undefined","map","elem","name","find","el","alert","Submit","toLowerCase","loading","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contacts","contactReducer","axios","defaults","baseURL","ContactForm","useState","setName","number","setNumber","validName","setValidName","validNum","setValidNum","dispatch","useDispatch","inputChange","e","target","attributes","nodeValue","value","validity","valid","className","styles","contact_form","htmlFor","contact_form_input_label","contact_form_input","type","pattern","title","required","autoComplete","onChange","placeholder","contact_form_button","onClick","newName","uuidv4","post","then","data","catch","error","getFilter","getLoading","getVisibleContacts","createSelector","element","includes","Filter","useSelector","ContactList","useEffect","get","contactList","contact_list_item","contact_list_item_name","contact_list_item_number","contact_list_item_button","delete","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.6fe6bf35.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const FetchContactsRequest = createAction(\r\n  'ContactList/FetchContactRequest',\r\n);\r\nexport const FetchContactsSuccess = createAction(\r\n  'ContactList/FetchContactSuccess',\r\n);\r\nexport const FetchContactsError = createAction('ContactList/FetchContactError');\r\n\r\nexport const SubmitContactRequest = createAction(\r\n  'ContactForm /SubmitContactRequest',\r\n);\r\nexport const SubmitContactSuccess = createAction(\r\n  'ContactForm /SubmitContactSuccess',\r\n);\r\nexport const SubmitContactError = createAction(\r\n  'ContactForm /SubmitContactError',\r\n);\r\nexport const DeleteContactRequest = createAction(\r\n  'ContactList / DeleteContactRequest',\r\n);\r\nexport const DeleteContactSuccess = createAction(\r\n  'ContactList / DeleteContactSuccess',\r\n);\r\nexport const DeleteContactError = createAction(\r\n  'ContactList / DeleteContactError',\r\n);\r\n\r\nexport const SetFilter = createAction('Filter/SetFilter');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  SubmitContactRequest,\r\n  SubmitContactSuccess,\r\n  SubmitContactError,\r\n  DeleteContactRequest,\r\n  DeleteContactSuccess,\r\n  DeleteContactError,\r\n  FetchContactsRequest,\r\n  FetchContactsSuccess,\r\n  FetchContactsError,\r\n} from './contacts-actions';\r\n\r\nconst Submit = (state, { payload }) => {\r\n  let arrayName = state.map(elem => elem.name).find(el => el === payload.name);\r\n  if (arrayName === undefined) {\r\n    return [payload, ...state];\r\n  } else {\r\n    alert(`${payload.name} уже есть в книге`);\r\n    return state;\r\n  }\r\n};\r\n\r\nconst items = createReducer([], {\r\n  [FetchContactsSuccess]: (_, action) => action.payload,\r\n  [DeleteContactSuccess]: (state, action) =>\r\n    state.filter(contact => contact.id !== action.payload),\r\n  [SubmitContactSuccess]: (state, action) => Submit(state, action),\r\n});\r\nconst filter = createReducer('', {\r\n  'Filter/SetFilter': (_, action) => action.payload.toLowerCase(),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [SubmitContactRequest]: () => true,\r\n  [SubmitContactSuccess]: () => false,\r\n  [SubmitContactError]: () => false,\r\n  [DeleteContactRequest]: () => true,\r\n  [DeleteContactSuccess]: () => false,\r\n  [DeleteContactError]: () => false,\r\n  [FetchContactsRequest]: () => true,\r\n  [FetchContactsSuccess]: () => false,\r\n  [FetchContactsError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n\r\n/*const initialStateItems = {\r\n  items: [\r\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n    { id: 'id-2', name: 'Hermione Klim', number: '443-89-12' },\r\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n    { id: 'id-4', name: 'Annie Copelend', number: '227-91-26' },\r\n  ],\r\n};*/\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactReducer from './contacts/contacts-reducer';\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: contactReducer },\r\n  //devTools: process.env.NODE_ENV === 'development',\r\n  middleware: middleware,\r\n});\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\nimport {\r\n  SubmitContactRequest,\r\n  SubmitContactSuccess,\r\n  SubmitContactError,\r\n  DeleteContactRequest,\r\n  DeleteContactSuccess,\r\n  DeleteContactError,\r\n  FetchContactsRequest,\r\n  FetchContactsSuccess,\r\n  FetchContactsError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const Submit = newName => dispatch => {\r\n  dispatch(SubmitContactRequest());\r\n  axios\r\n    .post('/contacts', newName)\r\n    .then(({ data }) => dispatch(SubmitContactSuccess(data)))\r\n    .catch(error => dispatch(SubmitContactError(error)));\r\n};\r\n\r\nexport const DeleteContact = id => dispatch => {\r\n  dispatch(DeleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(DeleteContactSuccess(id)))\r\n    .catch(error => dispatch(DeleteContactError(error)));\r\n};\r\n\r\nexport const FetchContacts = () => dispatch => {\r\n  dispatch(FetchContactsRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => {\r\n      dispatch(FetchContactsSuccess(data));\r\n    })\r\n    .catch(error => FetchContactsError(error));\r\n};\r\n","//import { connect } from 'react-redux';\r\n//import PropTypes from 'prop-types';\r\nimport React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './ContactForm.module.css';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Submit } from '../../redux/contacts/contacts-operations';\r\n\r\nconst ContactForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const [validName, setValidName] = useState(false);\r\n  const [validNum, setValidNum] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const addContactName = e => {\r\n    const newName = {\r\n      id: uuidv4(),\r\n      name: name,\r\n      number: number,\r\n    };\r\n    if (name && number !== '' && validName && validNum) {\r\n      dispatch(Submit(newName));\r\n      setName('');\r\n      setNumber('');\r\n    }\r\n  };\r\n\r\n  const inputChange = e => {\r\n    if (e.target.attributes.id.nodeValue === 'name') {\r\n      setName(e.target.value);\r\n      setValidName(e.target.validity.valid);\r\n    } else if (e.target.attributes.id.nodeValue === 'number') {\r\n      setNumber(e.target.value);\r\n      setValidNum(e.target.validity.valid);\r\n    }\r\n  };\r\n  return (\r\n    <form className={styles.contact_form}>\r\n      <label htmlFor={name} className={styles.contact_form_input_label}>\r\n        name\r\n      </label>\r\n      <input\r\n        className={styles.contact_form_input}\r\n        type=\"text\"\r\n        id=\"name\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={inputChange}\r\n        value={name}\r\n        placeholder=\" \"\r\n      />\r\n\r\n      <label htmlFor={number} className={styles.contact_form_input_label}>\r\n        number\r\n      </label>\r\n      <input\r\n        className={styles.contact_form_input}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n        title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n        required\r\n        id=\"number\"\r\n        autoComplete=\"off\"\r\n        onChange={inputChange}\r\n        value={number}\r\n        placeholder=\" \"\r\n      />\r\n\r\n      <button\r\n        className={styles.contact_form_button}\r\n        type=\"button\"\r\n        onClick={addContactName}\r\n      >\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n\r\n\r\n/*-------------------- Без useSelector и useDispatch-------------------------*/\r\n/*\r\nContactForm.propTypes = {\r\n  Submit: PropTypes.func.isRequired,\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    Submit: id => dispatch(operations.Submit(id)),\r\n  };\r\n};\r\nexport default connect(null, mapDispatchToProps)(ContactForm);*/\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getItems = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getItems, getFilter],\r\n  (items, filter) => {\r\n    const visible = items.filter(element =>\r\n      element.name.toLowerCase().includes(filter),\r\n    );\r\n    return visible;\r\n  },\r\n);\r\n","//import PropTypes from 'prop-types';\r\n//import { connect } from 'react-redux';\r\nimport { SetFilter } from '../../redux/contacts/contacts-actions';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst Filter = () => {\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      <h2>find contacts by name</h2>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        autoComplete=\"off\"\r\n        onChange={e => dispatch(SetFilter(e.target.value))}\r\n        value={filter}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\n/*-------------------- Без useSelector и useDispatch-------------------------*/\r\n/*\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onFilterContact: PropTypes.func,\r\n};\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filter: getFilter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSetFilter: e => dispatch(actions.onSetFilter(e.target.value)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);*/\r\n","//import { connect } from 'react-redux';\r\n//import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styles from './ContactList.module.css';\r\nimport {\r\n  FetchContacts,\r\n  DeleteContact,\r\n} from '../../redux/contacts/contacts-operations';\r\nimport React, { useEffect } from 'react';\r\nimport {\r\n  getVisibleContacts,\r\n  getLoading,\r\n} from '../../redux/contacts/contacts-selectors';\r\n\r\nconst ContactList = () => {\r\n  const items = useSelector(getVisibleContacts);\r\n  const loading = useSelector(getLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(FetchContacts()), []);\r\n\r\n  return (\r\n    <>\r\n      {loading && <p>Loading...</p>}\r\n      <ul className={styles.contactList}>\r\n        {items.map(element => (\r\n          <li key={element.id} className={styles.contact_list_item}>\r\n            <p className={styles.contact_list_item_name}>{element.name}</p>\r\n            <p className={styles.contact_list_item_number}>{element.number}</p>\r\n            <button\r\n              className={styles.contact_list_item_button}\r\n              type=\"button\"\r\n              onClick={() => dispatch(DeleteContact(element.id))}\r\n            >\r\n              delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\n\r\n\r\n\r\n/*-------------------- Без useSelector и useDispatch-------------------------*/\r\n\r\n/*ContactList.propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  DeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  items: getVisibleContacts(state),\r\n  loading: getLoading(state),\r\n});*/\r\n/*const mapDispatchToProps = dispatch => {\r\n  return {\r\n    DeleteContact: id => dispatch(operations.DeleteContact(id)),\r\n    FetchContacts: () => dispatch(operations.FetchContacts()),\r\n  };\r\n};*/\r\n//export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import './App.css';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nconst App = () => {\n  return (\n    <>\n      <h1>phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_form\":\"ContactForm_contact_form__3p4zE\",\"contact_form_input\":\"ContactForm_contact_form_input__2POFB\",\"contact_form_input_label\":\"ContactForm_contact_form_input_label__2R8xj\",\"contact_form_button\":\"ContactForm_contact_form_button__uxI2Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__CcQal\",\"contact_list_item\":\"ContactList_contact_list_item__3q_AZ\",\"contact_list_item_button\":\"ContactList_contact_list_item_button__3Rgae\",\"contact_list_item_name\":\"ContactList_contact_list_item_name__3Au-P\",\"contact_list_item_number\":\"ContactList_contact_list_item_number__2K9q6\"};"],"sourceRoot":""}